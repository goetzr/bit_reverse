//------------------------------------------------
//--- 010 Editor v15.0.2 Script File
//
//      File: bit_reverse.1sc
//   Authors: Russ Goetz
//   Version: 1.0.0
//   Purpose: Reverse the bits in each word of a file.
//  Category: Utilities
//   History: 
//------------------------------------------------

#link "bit_reverse.dll"
int bit_reverse(string in_file_path, string out_file_path, int word_size, char err_msg[], uint64 err_msg_capacity);
#endlink

// The output file is placed in the same directory as the input file.
// The output file name is the same as the input file name with "_reversed" appended.
string in_file_path =  GetFileName();
string in_file_dir = FileNameGetPath(in_file_path);
string in_file_name_base = FileNameGetBase(in_file_path, false);
string in_file_name_ext = FileNameGetExtension(in_file_path);
string out_file_path;
SPrintf(out_file_path, "%s%s_reversed%s", in_file_dir, in_file_name_base, in_file_name_ext);

int word_size = InputNumber("Word Size", "Please enter the desired word size, in bits (8, 16, 32, or 64).", "8");
if (word_size == BAD_VALUE) {
    MessageBox(idOk, "Error", "Invalid word size.");
    return;
}

if (word_size != 8 && word_size != 16 && word_size != 32 && word_size != 64) {
    MessageBox(idOk, "Error", "Invalid word size.");
    return;
}

if (FileSize() % (word_size / 8) != 0) {
    int response = MessageBox(idYes | idNo, "Warning", "The input file size is not a multiple of the chosen word size.\nIf you continue the input file contents will be zero-padded\nwhen performing the bit reversal.\nWould you like to continue?");
    if (response != idYes) {
        return;
    }
}

uint64 ERR_MSG_CAPACITY = 512;
char err_msg[ERR_MSG_CAPACITY];
int br_result = bit_reverse(in_file_path, out_file_path, word_size, err_msg, ERR_MSG_CAPACITY);
if (br_result != 0) {
    MessageBox(idOk, "Error", "Error: %s.", err_msg);
    return;
}

int of_result = FileOpen(out_file_path);
if (of_result < 0) {
    MessageBox(idOk, "Error", "Failed to open the output file.");
}